.modal-dialog#requestFormModal{ role: 'document' }
  .modal-content
    = form_for sparc_request, remote: true, html: { autocomplete: 'off' } do |f|
      = f.hidden_field :status, value: t(:requests)[:statuses][:pending]

      - if params[:status]
        = hidden_field_tag :status, params[:status]
      - if params[:sort_by]
        = hidden_field_tag :sort_by, params[:sort_by]
      - if params[:sort_order]
        = hidden_field_tag :sort_order, params[:sort_order]

      .modal-header
        %h5.modal-title
          = t(:requests)[:form][action_name == 'new' ? :new_title : :edit_title]
        %button.close{ type: 'button', data: { dismiss: 'modal' }, aria: { label: t(:actions)[:close] } }
          %span{ aria: { hidden: 'true' } } &times;
      .modal-body
        %section.card.mb-3
          .card-header
            %h5.card-title.m-0
              = t(:requests)[:form][:headers][:project_information]
          .card-body
            .form-row
              .form-group.col-lg-6
                = f.label :title, class: 'required'
                = f.text_field :title, class: 'form-control'
              .form-group.col-lg-6
                = f.label :short_title, class: 'required'
                = f.text_field :short_title, class: 'form-control', placeholder: t(:requests)[:form][:placeholders][:short_title]
            .form-group
              = f.label :description, class: 'required'
              = f.text_area :description, class: 'form-control'
            .form-row
              .form-group.col-6.col-lg-3
                = f.label :funding_status, class: 'required'
                = f.select :funding_status, PermissibleValue.get_inverted_hash('funding_status'), { include_blank: t(:constants)[:select_placeholder] }, class: 'form-control selectpicker'
              .form-group.col-6.col-lg-3
                = f.label :funding_source, class: 'required'
                = f.select :funding_source, PermissibleValue.get_inverted_hash('funding_source'), { include_blank: t(:constants)[:select_placeholder] }, class: 'form-control selectpicker'
              .form-group.col-6.col-lg-3
                = f.label :start_date, class: 'required'
                .input-group
                  = f.text_field :start_date, class: 'form-control', placeholder: t(:constants)[:date_placeholder], data: { provide: 'datepicker', date_container: '.modal', date_autoclose: 'true' }
                  .input-group-append
                    %label.input-group-text{ for: 'sparc_request_start_date' }
                      = icon('far', 'calendar-alt')
              .form-group.col-6.col-lg-3
                = f.label :end_date, class: 'required'
                .input-group
                  = f.text_field :end_date, class: 'form-control', placeholder: t(:constants)[:date_placeholder], data: { provide: 'datepicker', date_container: '.modal', date_autoclose: 'true' }
                  .input-group-append
                    %label.input-group-text{ for: 'sparc_request_end_date' }
                      = icon('far', 'calendar-alt')
        %section.card.mb-3
          .card-header
            %h5.card-title.m-0
              = t(:requests)[:form][:headers][:pi_information]
          .card-body
            .form-row
              .form-group.col-sm-6
                = f.label :primary_pi_name, class: 'required'
                = f.text_field :primary_pi_name, class: 'form-control typeahead', placeholder: t(:requests)[:form][:placeholders][:primary_pi]
              .form-group.col-sm-3
                = f.label :primary_pi_netid, class: 'required'
                = f.text_field :primary_pi_netid, class: 'form-control typeahead'
              .form-group.col-sm-3
                = f.label :primary_pi_email, class: 'required'
                = f.email_field :primary_pi_email, class: 'form-control'
                %small.form-text.text-muted
                  = t(:requests)[:form][:subtext][:primary_pi_email]
        %section.card.mb-3
          .card-header
            %h5.card-title.m-0
              = t(:requests)[:form][:headers][:specimen_information]
          .card-body
            .form-row
              .form-group.col-sm-6
                = f.label :service_id, class: 'required'
                = f.select :service_id, options_from_collection_for_select(Service.where(id: ENV.fetch('SERVICE_ID')), 'id', 'name', @sparc_request.service_id), { include_blank: t(:constants)[:select_placeholder] }, class: 'form-control selectpicker'
              .form-group.col-sm-6
                = f.label :service_source, class: 'required'
                = f.text_field :service_source, class: 'form-control typeahead', placeholder: t(:requests)[:form][:placeholders][:service_source]
            .form-row
              .form-group.col-sm-6
                = f.label :number_of_specimens_requested, class: 'required'
                = f.text_field :number_of_specimens_requested, class: 'form-control'
              .form-group.col-sm-6
                = f.label :minimum_sample_size, class: 'required'
                = f.text_field :minimum_sample_size, class: 'form-control', placeholder: t(:requests)[:form][:placeholders][:minimum_sample]
        %section.card
          .card-header
            %h5.card-title.m-0
              = t(:requests)[:form][:headers][:i2b2_information]
          .card-body
            .form-group
              = f.label :query_name, class: 'required'
              = f.select :query_name, options_from_collection_for_select(I2b2QueryName.where(user_id: current_user.net_id).order("create_date DESC"), 'name', 'name', @sparc_request.query_name), { include_blank: t(:constants)[:select_placeholder] }, class: 'form-control selectpicker'
              %small.form-text.text-muted
                = raw(t(:requests)[:form][:subtext][:i2b2_query])
      .modal-footer
        = f.submit t(:requests)[:form][:submit], class: 'btn btn-primary'
        - if action_name == 'new'
          %button.btn.btn-warning#saveDraftRequestButton{ type: 'button' }
            = t(:requests)[:form][:save_as_draft]
        %button.btn.btn-secondary{ type: 'button', data: { dismiss: 'modal' } }
          = t(:actions)[:close]
