.modal-dialog#requestFormModal{ role: 'document' }
  .modal-content
    = form_for sparc_request, remote: true, html: { autocomplete: 'off' } do |f|
      = f.hidden_field :status, value: t(:requests)[:statuses][:pending]

      - if params[:status]
        = hidden_field_tag :status, params[:status]
      - if params[:sort_by]
        = hidden_field_tag :sort_by, params[:sort_by]
      - if params[:sort_order]
        = hidden_field_tag :sort_order, params[:sort_order]

      .modal-header
        %h5.modal-title
          = t(:requests)[:form][action_name == 'new' ? :new_title : :edit_title]
        %button.close{ type: 'button', data: { dismiss: 'modal' }, aria: { label: t(:actions)[:close] } }
          %span{ aria: { hidden: 'true' } } &times;
      .modal-body
        %section.card.mb-3
          .card-header
            %h5.card-title.m-0
              = t(:requests)[:form][:headers][:project_information]
          .card-body
            .form-row
              .form-group.col-lg-6
                = f.label :title, class: 'required'
                = f.text_field :title, class: 'form-control'
              .form-group.col-lg-6
                = f.label :short_title, class: 'required'
                = f.text_field :short_title, class: 'form-control', placeholder: t(:requests)[:form][:placeholders][:short_title]
            .form-group
              = f.label :description, class: 'required'
              = f.text_area :description, class: 'form-control'
            .form-row
              .form-group.col-6.col-lg-3
                = f.label :funding_status, class: 'required'
                = f.select :funding_status, SPARC::PermissibleValue.get_inverted_hash('funding_status'), { include_blank: t(:constants)[:select_placeholder] }, class: 'form-control selectpicker'
              .form-group.col-6.col-lg-3
                = f.label :funding_source, class: 'required'
                = f.select :funding_source, SPARC::PermissibleValue.get_inverted_hash('funding_source'), { include_blank: t(:constants)[:select_placeholder] }, class: 'form-control selectpicker'
              .form-group.col-6.col-lg-3
                = f.label :start_date, class: 'required'
                .input-group
                  = f.text_field :start_date, class: 'form-control', placeholder: t(:constants)[:date_placeholder], data: { provide: 'datepicker', date_container: '.modal', date_autoclose: 'true' }
                  .input-group-append
                    %label.input-group-text{ for: 'sparc_request_start_date' }
                      = icon('far', 'calendar-alt')
              .form-group.col-6.col-lg-3
                = f.label :end_date, class: 'required'
                .input-group
                  = f.text_field :end_date, class: 'form-control', placeholder: t(:constants)[:date_placeholder], data: { provide: 'datepicker', date_container: '.modal', date_autoclose: 'true' }
                  .input-group-append
                    %label.input-group-text{ for: 'sparc_request_end_date' }
                      = icon('far', 'calendar-alt')
            .form-row
              .form-group.col-sm-6
                = f.label :primary_pi_name, class: 'required'
                = text_field_tag "name_search", f.object.pi_display_name, class: 'form-control typeahead', placeholder: t(:requests)[:form][:placeholders][:primary_pi]

                = f.hidden_field :primary_pi_name
                = f.hidden_field :primary_pi_netid
                = f.hidden_field :primary_pi_email
        %section.card.mb-3
          .card-header
            %h5.card-title.m-0
              = t(:requests)[:form][:headers][:specimens]
          .card-body
            .form-row
              .form-group.col
                %p.form-text.text-muted.m-0
                  = raw(t(:requests)[:form][:subtext][:i2b2_query])
            = f.nested_fields_for :line_items do |ff_li|
              .form-row
                .form-group.col-sm-3
                  = ff_li.label :service_id, class: 'required'
                  = ff_li.select :service_id, options_from_collection_for_select(SPARC::Service.where(id: ENV.fetch('SERVICE_ID')), 'id', 'name', ff_li.object.service_id), { include_blank: t(:constants)[:select_placeholder] }, class: 'form-control selectpicker', data: { live_search: 'true' }
                .form-group.col
                  = ff_li.label :service_source, class: 'required'
                  = ff_li.select :service_source, options_for_select(Lab::SOURCES, ff_li.object.service_source), { include_blank: t(:constants)[:select_placeholder] }, class: 'form-control selectpicker', data: { live_search: 'true' }
                .form-group.col
                  = ff_li.label :query_name, class: 'required'
                  = ff_li.select :query_name, options_from_collection_for_select(I2b2::QueryName.where(user_id: current_user.net_id).order("create_date DESC"), 'name', 'name', ff_li.object.query_name), { include_blank: t(:constants)[:select_placeholder] }, class: 'form-control selectpicker'
                .form-group.col
                  = ff_li.label :number_of_specimens_requested, class: 'required'
                  = ff_li.text_field :number_of_specimens_requested, class: 'form-control'
                .form-group.col
                  = ff_li.label :minimum_sample_size, class: 'required'
                  = ff_li.text_field :minimum_sample_size, class: 'form-control', placeholder: t(:requests)[:form][:placeholders][:minimum_sample]
                .form-group.d-flex.flex-column.px-1
                  %label.w-100 &nbsp;
                  = ff_li.remove_nested_fields_link class: 'btn btn-danger' do
                    = icon('fas', 'trash')
            .form-group
              = f.add_nested_fields_link :line_items, class: 'btn btn-primary' do
                = icon('fas', 'plus-circle')
                = 'Add Service'
      .modal-footer
        = f.submit t(:requests)[:form][:submit], class: 'btn btn-primary'
        - if action_name == 'new'
          %button.btn.btn-warning#saveDraftRequestButton{ type: 'button' }
            = t(:requests)[:form][:save_as_draft]
        %button.btn.btn-secondary{ type: 'button', data: { dismiss: 'modal' } }
          = t(:actions)[:close]